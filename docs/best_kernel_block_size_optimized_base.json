{
  "task": "Write OpenCL kernel that implements the torch model provided below import torch\nimport torch.nn as nn\n\n\nclass Model(nn.Module):\n    \"\"\"\n    Simple model that performs a single square matrix multiplication (C = A * B)\n    \"\"\"\n\n    def __init__(self):\n        super(Model, self).__init__()\n\n    def forward(self, A: torch.Tensor, B: torch.Tensor) -> torch.Tensor:\n        \"\"\"\n        Performs the matrix multiplication.\n\n        Args:\n            A (torch.Tensor): Input matrix A of shape (N, N).\n            B (torch.Tensor): Input matrix B of shape (N, N).\n\n        Returns:\n            torch.Tensor: Output matrix C of shape (N, N).\n        \"\"\"\n        return torch.matmul(A, B)\n\n\nN = 2048\n\n\ndef get_inputs():\n    A = torch.randn(N, N)\n    B = torch.randn(N, N)\n    return [A, B]\n\n\ndef get_init_inputs():\n    return []  # No special initialization inputs needed\n. Use the input specifications provided above for any validation and timings. A sample cuda kernel is provided here #include <torch/extension.h>\n\n#include <cuda.h>\n#include <cuda_runtime.h>\n#include <c10/cuda/CUDAException.h>\n\n#define TILE_SIZE 32\n\n#define CHECK_CUDA(x) TORCH_CHECK(x.is_cuda(), #x \" must be a CUDA tensor\")\n#define CHECK_CONTIGUOUS(x) TORCH_CHECK(x.is_contiguous(), #x \" must be contiguous\")\n#define CHECK_INPUT(x) CHECK_CUDA(x); CHECK_CONTIGUOUS(x)\n#define CHECK_FLOAT(x) TORCH_CHECK(x.scalar_type() == torch::kFloat32, #x \" must be a float32 tensor\")\n\n__global__ void matmul_tiled_kernel(const float* __restrict__ A, const float* __restrict__ B, float* __restrict__ C, int N) {\n    __shared__ float As[TILE_SIZE][TILE_SIZE];\n    __shared__ float Bs[TILE_SIZE][TILE_SIZE];\n\n    int tx = threadIdx.x;\n    int ty = threadIdx.y;\n\n    int row = blockIdx.y * TILE_SIZE + ty;\n    int col = blockIdx.x * TILE_SIZE + tx;\n\n    float C_value = 0.0f;\n\n    for (int m = 0; m < (N + TILE_SIZE - 1) / TILE_SIZE; ++m) {\n        if (row < N && m * TILE_SIZE + tx < N)\n            As[ty][tx] = A[row * N + m * TILE_SIZE + tx];\n        else\n            As[ty][tx] = 0.0f;\n\n        if (col < N && m * TILE_SIZE + ty < N)\n            Bs[ty][tx] = B[(m * TILE_SIZE + ty) * N + col];\n        else\n            Bs[ty][tx] = 0.0f;\n\n        __syncthreads();\n\n        #pragma unroll\n        for (int k = 0; k < TILE_SIZE; ++k) {\n            C_value += As[ty][k] * Bs[k][tx];\n        }\n\n        __syncthreads();\n    }\n\n    if (row < N && col < N)\n        C[row * N + col] = C_value;\n}\n\ntorch::Tensor forward(torch::Tensor A, torch::Tensor B) {\n    CHECK_INPUT(A);\n    CHECK_INPUT(B);\n    CHECK_FLOAT(A);\n    CHECK_FLOAT(B);\n\n    TORCH_CHECK(A.dim() == 2 && A.size(0) == A.size(1), \"A must be a square matrix\");\n    TORCH_CHECK(B.dim() == 2 && B.size(0) == B.size(1), \"B must be a square matrix\");\n    TORCH_CHECK(A.size(0) == B.size(0), \"A and B must be of the same size\");\n\n    int64_t N = A.size(0);\n\n    auto C = torch::zeros({N, N}, A.options());\n\n    const float* A_data = A.data_ptr<float>();\n    const float* B_data = B.data_ptr<float>();\n    float* C_data = C.data_ptr<float>();\n\n    dim3 threadsPerBlock(TILE_SIZE, TILE_SIZE);\n    dim3 blocksPerGrid((N + TILE_SIZE - 1) / TILE_SIZE, (N + TILE_SIZE - 1) / TILE_SIZE);\n\n    matmul_tiled_kernel<<<blocksPerGrid, threadsPerBlock>>>(A_data, B_data, C_data, N);\n\n    C10_CUDA_CHECK(cudaGetLastError());\n\n    return C;\n}\n\nPYBIND11_MODULE(TORCH_EXTENSION_NAME, m) {\n    m.def(\"forward\", &forward, \"Matrix multiplication kernel (CUDA)\");\n}. The signature of the OpenCL kernel should match the signature of the cuda sample kernel.",
  "task_name": "block_size_optimized_base",
  "kernel_code": "def runner_setup():\n    import time\n    import numpy as np\n    import pyopencl as cl\n\n    # Add the kernel code into a python string\n    opencl_code = \"\"\"\n    __kernel void matmul_tiled_kernel(\n        __global const float* restrict A,\n        __global const float* restrict B,\n        __global float* restrict C,\n        const int N\n    ) {\n        const int TILE_SIZE = 16;\n        \n        __local float As[TILE_SIZE][TILE_SIZE];\n        __local float Bs[TILE_SIZE][TILE_SIZE];\n        \n        int tx = get_local_id(0);\n        int ty = get_local_id(1);\n        int row = get_group_id(1) * TILE_SIZE + ty;\n        int col = get_group_id(0) * TILE_SIZE + tx;\n        \n        float sum = 0.0f;\n        \n        for (int m = 0; m < (N + TILE_SIZE - 1) / TILE_SIZE; ++m) {\n            // Load tiles into local memory\n            if (row < N && m * TILE_SIZE + tx < N)\n                As[ty][tx] = A[row * N + m * TILE_SIZE + tx];\n            else\n                As[ty][tx] = 0.0f;\n                \n            if (col < N && m * TILE_SIZE + ty < N)\n                Bs[ty][tx] = B[(m * TILE_SIZE + ty) * N + col];\n            else\n                Bs[ty][tx] = 0.0f;\n                \n            barrier(CLK_LOCAL_MEM_FENCE);\n            \n            // Compute partial dot product using the tiles\n            #pragma unroll\n            for (int k = 0; k < TILE_SIZE; ++k) {\n                sum += As[ty][k] * Bs[k][tx];\n            }\n            \n            barrier(CLK_LOCAL_MEM_FENCE);\n        }\n        \n        if (row < N && col < N)\n            C[row * N + col] = sum;\n    }\n    \"\"\"\n\n    N = 2048\n    num_iterations = 10\n\n    # Function to verify the results\n    def verification_fn():\n        result_host = np.empty_like(A_host)\n        cl.enqueue_copy(queue, result_host, C_buf)\n        expected = np.matmul(A_host, B_host)\n        ok = np.allclose(result_host, expected, rtol=1e-4, atol=1e-4)\n        return ok, \"Results match!\" if ok else \"Results do NOT match!\"\n\n    # Initialize data with random values\n    A_host = np.random.rand(N, N).astype(np.float32)\n    B_host = np.random.rand(N, N).astype(np.float32)\n    \n    # Create OpenCL buffers\n    mf = cl.mem_flags\n    platforms = cl.get_platforms()\n    platform = platforms[0]\n    devices = platform.get_devices(device_type=cl.device_type.GPU)\n    if not devices:\n        raise RuntimeError(\"No OpenCL GPU devices found.\")\n    device = devices[0]\n    print(f\"Using OpenCL device: {device.name}\")\n    ctx = cl.Context([device])\n    queue = cl.CommandQueue(ctx)\n\n    A_buf = cl.Buffer(ctx, mf.READ_ONLY | mf.COPY_HOST_PTR, hostbuf=A_host)\n    B_buf = cl.Buffer(ctx, mf.READ_ONLY | mf.COPY_HOST_PTR, hostbuf=B_host)\n    C_buf = cl.Buffer(ctx, mf.WRITE_ONLY, size=N * N * np.dtype(np.float32).itemsize)\n    \n    # Build the kernel\n    program = cl.Program(ctx, opencl_code).build()\n    matmul_kernel = program.matmul_tiled_kernel\n\n    local_size = (16, 16)\n    global_size = (((N + local_size[0] - 1) // local_size[0]) * local_size[0],\n                  ((N + local_size[1] - 1) // local_size[1]) * local_size[1])\n    \n    execution_times = []\n    for i in range(num_iterations):\n        # Get kernel inputs\n        args = (A_buf, B_buf, C_buf, np.int32(N))\n        \n        queue.finish()\n        start_time = time.time()\n        # Launch kernel\n        matmul_kernel(queue, global_size, local_size, *args)\n        queue.finish()\n        end_time = time.time()\n        elapsed_time = (end_time - start_time) * 1000\n\n        execution_times.append(elapsed_time)\n        print(f\"Iteration {i+1}: {elapsed_time:.2f} ms\")\n\n    avg_time = sum(execution_times) / len(execution_times)\n    min_time = min(execution_times)\n    max_time = max(execution_times)\n\n    is_correct, msg = verification_fn()\n\n    timing_result = {\n        \"iterations\": num_iterations,\n        \"average_ms\": avg_time,\n        \"min_ms\": min_time,\n        \"max_ms\": max_time,\n        \"all_times_ms\": execution_times,\n        \"correct_result\": is_correct,\n        \"verification_feedback\": msg,\n        \"local_size\": local_size,\n        \"global_size\": global_size\n    }\n    return timing_result",
  "timing_info": {
    "iterations": 10,
    "average_ms": 8.212995529174805,
    "min_ms": 7.3795318603515625,
    "max_ms": 10.71619987487793,
    "all_times_ms": [
      10.71619987487793,
      7.878541946411133,
      8.254528045654297,
      7.901430130004883,
      7.974147796630859,
      7.671117782592773,
      8.513450622558594,
      7.384300231933594,
      8.456707000732422,
      7.3795318603515625
    ],
    "correct_result": true,
    "verification_feedback": "Results match!",
    "local_size": [
      16,
      16
    ],
    "global_size": [
      2048,
      2048
    ]
  }
}