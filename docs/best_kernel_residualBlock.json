{
  "task": "Write OpenCL kernel that implements a residual block as used in DNNs: given an input vector x of size 1024, two weight matrices W1 and W2 of size 1024x1024, and two bias vectors b1 and b2 of size 1024, compute result = ReLU(W2 * ReLU(W1 * x + b1) + b2 + x). The signature of the kernel should be __kernel void residualBlock(__global const float* restrict x, __global const float* restrict W1, __global const float* restrict b1, __global const float* restrict W2, __global const float* restrict b2, __global float* restrict result, const int dim).",
  "kernel_code": "def runner_setup():\n    import time\n    import numpy as np\n    import pyopencl as cl\n\n    # OpenCL Kernel\n    opencl_code = \"\"\"\n    __kernel void residualBlock(\n        __global const float* restrict x,\n        __global const float* restrict W1,\n        __global const float* restrict b1,\n        __global const float* restrict W2,\n        __global const float* restrict b2,\n        __global float* restrict result,\n        const int dim) {\n        \n        // Local memory allocation for shared data\n        __local float x_local[1024];\n        __local float intermediate[1024];\n        \n        const int gid = get_global_id(0);\n        const int lid = get_local_id(0);\n        const int local_size = get_local_size(0);\n        \n        // Collaborative loading of input vector\n        for (int i = lid; i < dim; i += local_size) {\n            x_local[i] = x[i];\n        }\n        \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        // First layer computation\n        if (gid < dim) {\n            // Load bias first (important for numerical stability)\n            float sum1 = b1[gid];\n            const int row_offset = gid * dim;\n            \n            // Process matrix multiply in blocks of 8 for better instruction level parallelism\n            int j = 0;\n            for (; j <= dim - 8; j += 8) {\n                sum1 += W1[row_offset + j] * x_local[j];\n                sum1 += W1[row_offset + j + 1] * x_local[j + 1];\n                sum1 += W1[row_offset + j + 2] * x_local[j + 2];\n                sum1 += W1[row_offset + j + 3] * x_local[j + 3];\n                sum1 += W1[row_offset + j + 4] * x_local[j + 4];\n                sum1 += W1[row_offset + j + 5] * x_local[j + 5];\n                sum1 += W1[row_offset + j + 6] * x_local[j + 6];\n                sum1 += W1[row_offset + j + 7] * x_local[j + 7];\n            }\n            \n            // Handle remaining elements\n            for (; j < dim; j++) {\n                sum1 += W1[row_offset + j] * x_local[j];\n            }\n            \n            // Apply ReLU activation\n            intermediate[gid] = max(0.0f, sum1);\n        }\n        \n        barrier(CLK_LOCAL_MEM_FENCE);\n        \n        // Second layer computation with residual connection\n        if (gid < dim) {\n            // Load bias and add residual connection directly\n            float sum2 = b2[gid] + x_local[gid];\n            const int row_offset = gid * dim;\n            \n            // Process in blocks of 8\n            int j = 0;\n            for (; j <= dim - 8; j += 8) {\n                sum2 += W2[row_offset + j] * intermediate[j];\n                sum2 += W2[row_offset + j + 1] * intermediate[j + 1];\n                sum2 += W2[row_offset + j + 2] * intermediate[j + 2];\n                sum2 += W2[row_offset + j + 3] * intermediate[j + 3];\n                sum2 += W2[row_offset + j + 4] * intermediate[j + 4];\n                sum2 += W2[row_offset + j + 5] * intermediate[j + 5];\n                sum2 += W2[row_offset + j + 6] * intermediate[j + 6];\n                sum2 += W2[row_offset + j + 7] * intermediate[j + 7];\n            }\n            \n            // Handle remaining elements\n            for (; j < dim; j++) {\n                sum2 += W2[row_offset + j] * intermediate[j];\n            }\n            \n            // Apply ReLU activation and write result to global memory\n            result[gid] = max(0.0f, sum2);\n        }\n    }\n    \"\"\"\n\n    dim = 1024\n    num_iterations = 10\n\n    # Function to verify the results\n    def verification_fn():\n        result_host = np.empty((dim,), dtype=np.float32)\n        cl.enqueue_copy(queue, result_host, result_buf)\n        \n        # Reference CPU computation\n        intermediate_cpu = np.maximum(0, W1_host @ x_host + b1_host)\n        expected = np.maximum(0, W2_host @ intermediate_cpu + b2_host + x_host)\n        \n        ok = np.allclose(result_host, expected, rtol=1e-5, atol=1e-5)\n        return ok, \"Results match!\" if ok else \"Results do NOT match!\"\n\n    # Initialize data with random values\n    x_host = np.random.rand(dim).astype(np.float32)\n    W1_host = np.random.rand(dim, dim).astype(np.float32)\n    b1_host = np.random.rand(dim).astype(np.float32)\n    W2_host = np.random.rand(dim, dim).astype(np.float32)\n    b2_host = np.random.rand(dim).astype(np.float32)\n    \n    # Create OpenCL buffers\n    mf = cl.mem_flags\n    platforms = cl.get_platforms()\n    if not platforms:\n        raise RuntimeError(\"No OpenCL platforms found.\")\n    platform = platforms[0]\n    devices = platform.get_devices()\n    device = devices[0]\n    print(f\"Using OpenCL device: {device.name}\")\n    ctx = cl.Context([device])\n    queue = cl.CommandQueue(ctx)\n\n    x_buf = cl.Buffer(ctx, mf.READ_ONLY | mf.COPY_HOST_PTR, hostbuf=x_host)\n    W1_buf = cl.Buffer(ctx, mf.READ_ONLY | mf.COPY_HOST_PTR, hostbuf=W1_host.flatten())\n    b1_buf = cl.Buffer(ctx, mf.READ_ONLY | mf.COPY_HOST_PTR, hostbuf=b1_host)\n    W2_buf = cl.Buffer(ctx, mf.READ_ONLY | mf.COPY_HOST_PTR, hostbuf=W2_host.flatten())\n    b2_buf = cl.Buffer(ctx, mf.READ_ONLY | mf.COPY_HOST_PTR, hostbuf=b2_host)\n    result_buf = cl.Buffer(ctx, mf.WRITE_ONLY, size=dim * np.dtype(np.float32).itemsize)\n    \n    # Build the kernel\n    program = cl.Program(ctx, opencl_code).build()\n    residualBlock = program.residualBlock\n\n    execution_times = []\n    # Adreno GPUs work well with work-group sizes of 64 or 128\n    local_size = [64]\n    # Make sure global size is a multiple of the local size\n    global_size = [((dim + local_size[0] - 1) // local_size[0]) * local_size[0]]\n\n    for i in range(num_iterations):\n        args = (x_buf, W1_buf, b1_buf, W2_buf, b2_buf, result_buf, np.int32(dim))\n        \n        queue.finish()\n        start_time = time.time()\n        \n        residualBlock(queue, global_size, local_size, *args)\n        \n        queue.finish()\n        end_time = time.time()\n        elapsed_time = (end_time - start_time) * 1000\n\n        execution_times.append(elapsed_time)\n        print(f\"Iteration {i+1}: {elapsed_time:.2f} ms\")\n\n    avg_time = sum(execution_times) / len(execution_times)\n    min_time = min(execution_times)\n    max_time = max(execution_times)\n\n    is_correct, msg = verification_fn()\n\n    timing_result = {\n        \"iterations\": num_iterations,\n        \"average_ms\": avg_time,\n        \"min_ms\": min_time,\n        \"max_ms\": max_time,\n        \"all_times_ms\": execution_times,\n        \"correct_result\": is_correct,\n        \"verification_feedback\": msg,\n        \"block_size\": local_size[0],\n        \"grid_size\": global_size[0]\n    }\n    return timing_result",
  "timing_info": {
    "iterations": 10,
    "average_ms": 0.3802299499511719,
    "min_ms": 0.2377033233642578,
    "max_ms": 1.6307830810546875,
    "all_times_ms": [
      1.6307830810546875,
      0.2529621124267578,
      0.24199485778808594,
      0.23937225341796875,
      0.2391338348388672,
      0.23794174194335938,
      0.2377033233642578,
      0.240325927734375,
      0.24366378784179688,
      0.2384185791015625
    ],
    "correct_result": false,
    "verification_feedback": "Results do NOT match!",
    "block_size": 64,
    "grid_size": 1024
  }
}