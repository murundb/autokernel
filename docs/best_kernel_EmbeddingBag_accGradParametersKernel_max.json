{
  "task": "Write OpenCL kernel that implements the cuda kernel provided below __global__ void EmbeddingBag_accGradParametersKernel_max(\n    const index_t *max_indices, const scalar_t *gradOutput,\n    scalar_t *gradWeight, int64_t stride, int64_t numBags,\n    index_t padding_idx, const index_t numel) {\n\n  using accscalar_t = acc_type<scalar_t, true>;\n\n  int64_t chunksPerBag = ceil_div(stride, (int64_t)blockDim.x);\n  int64_t numChunks = numBags * chunksPerBag;\n  int64_t chunkOffset = blockIdx.x * blockDim.y + threadIdx.y;\n  int64_t chunkStride = gridDim.x * blockDim.y;\n\n  for (int64_t chunk = chunkOffset; chunk < numChunks; chunk += chunkStride) {\n    int64_t featureDim = (chunk % chunksPerBag) * blockDim.x + threadIdx.x;\n    if (featureDim < stride) {\n      int64_t bag = chunk / chunksPerBag;\n\n      index_t word_idx = max_indices[bag * stride + featureDim];\n      if (word_idx >= 0 && word_idx != padding_idx) {\n        // If bag is empty, we have max_indices[idx] set to -1 in forward.\n        fastAtomicAdd(\n            gradWeight, static_cast<index_t>(word_idx * stride + featureDim),\n            numel, gradOutput[bag * stride + featureDim], true);\n      }\n    }\n  }\n}. The signature of the OpenCL kernel should match the signature of the cuda kernel.",
  "kernel_code": "\ndef runner_setup():\n    import time\n    import numpy as np\n    import pyopencl as cl\n\n    # OpenCL kernel code\n    opencl_code = \"\"\"\n    // Helper function for ceiling division\n    inline long ceil_div_long(long numerator, long denominator) {\n        return (numerator + denominator - 1) / denominator;\n    }\n\n    // Atomic add implementation for float values\n    inline void atomic_add_float(__global float *addr, float val) {\n        union {\n            uint u32;\n            float f32;\n        } next, expected, current;\n        current.f32 = *addr;\n        do {\n            expected.f32 = current.f32;\n            next.f32 = expected.f32 + val;\n            current.u32 = atomic_cmpxchg((volatile __global uint *)addr, expected.u32, next.u32);\n        } while (current.u32 != expected.u32);\n    }\n\n    __kernel void EmbeddingBag_accGradParametersKernel_max(\n        __global const int *max_indices, \n        __global const float *gradOutput,\n        __global float *gradWeight, \n        const long stride, \n        const long numBags,\n        const int padding_idx, \n        const int numel) {\n\n        // Calculate work distribution\n        long chunksPerBag = ceil_div_long(stride, (long)get_local_size(0));\n        long numChunks = numBags * chunksPerBag;\n        long chunkOffset = get_group_id(0) * get_local_size(1) + get_local_id(1);\n        long chunkStride = get_num_groups(0) * get_local_size(1);\n\n        // Process chunks in parallel\n        for (long chunk = chunkOffset; chunk < numChunks; chunk += chunkStride) {\n            long featureDim = (chunk % chunksPerBag) * get_local_size(0) + get_local_id(0);\n            if (featureDim < stride) {\n                long bag = chunk / chunksPerBag;\n                \n                // Calculate indices for memory access\n                long idx = bag * stride + featureDim;\n                int word_idx = max_indices[idx];\n                \n                // Check if word index is valid\n                if (word_idx >= 0 && word_idx != padding_idx) {\n                    // Calculate index for gradient weight update\n                    long gradWeightIdx = word_idx * stride + featureDim;\n                    \n                    // Atomic add to update gradient weight\n                    atomic_add_float(&gradWeight[gradWeightIdx], gradOutput[idx]);\n                }\n            }\n        }\n    }\n    \"\"\"\n\n    # Setup problem dimensions\n    stride = 1024\n    numBags = 128\n    vocab_size = 10000\n    padding_idx = -1\n    numel = stride * numBags\n\n    # Function to verify the results\n    def verification_fn():\n        result_host = np.zeros_like(gradWeight_host)\n        cl.enqueue_copy(queue, result_host, gradWeight_buf)\n        \n        # Compute expected result on CPU\n        expected = np.zeros_like(gradWeight_host)\n        for bag in range(numBags):\n            for feat in range(stride):\n                idx = bag * stride + feat\n                word_idx = max_indices_host[idx]\n                if word_idx >= 0 and word_idx != padding_idx:\n                    expected[word_idx * stride + feat] += gradOutput_host[idx]\n        \n        ok = np.allclose(result_host, expected, rtol=1e-5, atol=1e-5)\n        return ok, \"Results match!\" if ok else \"Results do NOT match!\"\n\n    # Initialize data\n    np.random.seed(42)\n    max_indices_host = np.random.randint(-1, vocab_size, size=numBags * stride).astype(np.int32)\n    gradOutput_host = np.random.rand(numBags * stride).astype(np.float32)\n    gradWeight_host = np.zeros(vocab_size * stride, dtype=np.float32)\n    \n    # Setup OpenCL\n    platforms = cl.get_platforms()\n    if not platforms:\n        raise RuntimeError(\"No OpenCL platforms found.\")\n    platform = platforms[0]\n    devices = platform.get_devices(device_type=cl.device_type.GPU)\n    if not devices:\n        raise RuntimeError(\"No OpenCL GPU devices found.\")\n    device = devices[0]\n    print(f\"Using OpenCL device: {device.name}\")\n    ctx = cl.Context([device])\n    queue = cl.CommandQueue(ctx)\n\n    # Create OpenCL buffers\n    mf = cl.mem_flags\n    max_indices_buf = cl.Buffer(ctx, mf.READ_ONLY | mf.COPY_HOST_PTR, hostbuf=max_indices_host)\n    gradOutput_buf = cl.Buffer(ctx, mf.READ_ONLY | mf.COPY_HOST_PTR, hostbuf=gradOutput_host)\n    gradWeight_buf = cl.Buffer(ctx, mf.READ_WRITE | mf.COPY_HOST_PTR, hostbuf=gradWeight_host)\n    \n    # Build the kernel\n    program = cl.Program(ctx, opencl_code).build()\n    kernel = program.EmbeddingBag_accGradParametersKernel_max\n\n    # Determine work group sizes\n    block_size_x = 32  # Thread block X dimension (featureDim)\n    block_size_y = 8   # Thread block Y dimension (bags)\n    grid_size_x = (numBags + block_size_y - 1) // block_size_y  # Grid size\n    \n    local_size = (block_size_x, block_size_y)\n    global_size = (block_size_x * grid_size_x, block_size_y)\n\n    # Kernel arguments\n    args = (\n        max_indices_buf, \n        gradOutput_buf, \n        gradWeight_buf, \n        np.int64(stride), \n        np.int64(numBags), \n        np.int32(padding_idx), \n        np.int32(numel)\n    )\n\n    # Warm-up run\n    kernel(queue, global_size, local_size, *args)\n    queue.finish()\n    \n    # Reset gradient buffer\n    cl.enqueue_copy(queue, gradWeight_buf, gradWeight_host)\n    queue.finish()\n\n    # Benchmarking\n    num_iterations = 10\n    execution_times = []\n    \n    for i in range(num_iterations):\n        # Reset gradWeight for each iteration\n        cl.enqueue_copy(queue, gradWeight_buf, gradWeight_host)\n        queue.finish()\n        \n        start_time = time.time()\n        kernel(queue, global_size, local_size, *args)\n        queue.finish()\n        end_time = time.time()\n        \n        elapsed_time = (end_time - start_time) * 1000  # Convert to ms\n        execution_times.append(elapsed_time)\n        print(f\"Iteration {i+1}: {elapsed_time:.2f} ms\")\n\n    # Verify results\n    is_correct, msg = verification_fn()\n\n    # Report results\n    timing_result = {\n        \"iterations\": num_iterations,\n        \"average_ms\": sum(execution_times) / len(execution_times),\n        \"min_ms\": min(execution_times),\n        \"max_ms\": max(execution_times),\n        \"all_times_ms\": execution_times,\n        \"correct_result\": is_correct,\n        \"verification_feedback\": msg,\n        \"block_size\": local_size,\n        \"grid_size\": global_size\n    }\n    return timing_result\n",
  "timing_info": {
    "iterations": 10,
    "average_ms": 0.6066799163818359,
    "min_ms": 0.5016326904296875,
    "max_ms": 0.7390975952148438,
    "all_times_ms": [
      0.6337165832519531,
      0.5328655242919922,
      0.5016326904296875,
      0.7390975952148438,
      0.640869140625,
      0.5626678466796875,
      0.5993843078613281,
      0.5834102630615234,
      0.6711483001708984,
      0.6020069122314453
    ],
    "correct_result": true,
    "verification_feedback": "Results match!",
    "block_size": [
      32,
      8
    ],
    "grid_size": [
      512,
      8
    ]
  }
}